import sqlite3
import json
import os
from datetime import datetime, date
from typing import List, Dict
import openai
from dotenv import load_dotenv

load_dotenv()

# Initialize OpenAI client
openai_client = openai.AsyncOpenAI(api_key=os.environ['OPENAI_API_KEY'])

def get_today_messages(db_path='processed_messages.db') -> List[Dict]:
    """
    Connect to SQLite database and retrieve all messages from today
    """
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Get today's date in YYYY-MM-DD format
    today = date.today().strftime('%Y-%m-%d')
    
    # Query for messages from today
    cursor.execute('''
        SELECT channel, message_id, original_text, decision_json, timestamp
        FROM editor_decisions 
        WHERE DATE(timestamp) = ?
        ORDER BY timestamp DESC
    ''', (today,))
    
    messages = []
    for row in cursor.fetchall():
        channel, message_id, original_text, decision_json, timestamp = row
        try:
            decision = json.loads(decision_json) if decision_json else {}
        except json.JSONDecodeError:
            decision = {}
        
        messages.append({
            'channel': channel,
            'message_id': message_id,
            'original_text': original_text,
            'decision': decision,
            'timestamp': timestamp
        })
    
    conn.close()
    return messages

async def create_digest_with_llm(messages: List[Dict]) -> str:
    """
    Use LLM to create a digest of today's news
    """
    if not messages:
        return "No messages found for today."
    
    # Prepare the messages for the LLM
    messages_text = ""
    for i, msg in enumerate(messages, 1):
        channel = msg['channel']
        message_id = msg['message_id']
        original_text = msg['original_text']
        decision = msg.get('decision', {})
        
        # Create a link to the original message (assuming it's a Telegram channel)
        if channel.startswith('@'):
            link = f"https://t.me/{channel[1:]}/{message_id}"
        else:
            link = f"https://t.me/c/{channel}/{message_id}"
        
        translated_text = decision.get('Translated News', 'No translation available')
        reasoning = decision.get('Reasoning', 'No reasoning provided')
        
        messages_text += f"""
{i}. Original Text: {original_text[:200]}...
   Translation: {translated_text}
   Reasoning: {reasoning}
   Link: {link}
   Channel: {channel}
   ---
"""
    
    # Create the prompt for the LLM
    system_prompt = """You are an expert news analyst. Create a concise daily digest of the provided news items. 
For each news item, provide:
1. A brief summary (2-3 sentences)
2. Why this news is important
3. The link to the original message

Format the digest in a clear, professional manner with proper headings and bullet points."""

    user_prompt = f"""Create a daily news digest for today ({date.today().strftime('%B %d, %Y')}) based on the following {len(messages)} news items:

{messages_text}

Please provide a well-structured digest with:
- A brief introduction
- Each news item summarized with its importance explained
- Links to original sources
- A brief conclusion if appropriate"""

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt},
            ],
            max_tokens=2000,
            temperature=0.7
        )
        
        content = response.choices[0].message.content
        return content if content else "No content generated by AI"
    except Exception as e:
        return f"Error creating digest: {str(e)}"

async def main():
    """
    Main function to create and display today's news digest
    """
    print("Creating daily news digest...")
    print("=" * 50)
    
    # Get today's messages from the database
    messages = get_today_messages(db_path='server_db.db')
    
    if not messages:
        print("No messages found for today.")
        return
    
    print(f"Found {len(messages)} messages for today.")
    print("Generating digest with AI...")
    print()
    
    # Create the digest using LLM
    digest = await create_digest_with_llm(messages)
    
    # Display the digest
    print("DAILY NEWS DIGEST")
    print("=" * 50)
    print(digest)
    print("=" * 50)
    
    # Optionally save to file
    today_str = date.today().strftime('%Y-%m-%d')
    filename = f"digest_{today_str}.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(f"DAILY NEWS DIGEST - {today_str}\n")
        f.write("=" * 50 + "\n")
        f.write(digest)
        f.write("\n" + "=" * 50 + "\n")
    
    print(f"\nDigest saved to {filename}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())